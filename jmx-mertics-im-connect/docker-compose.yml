version: '3.9'
services:
  im-gateway:
    build:
      context: ./im-gateway
      dockerfile: Dockerfile
    image: im-gateway:latest

    hostname: im-gateway
    container_name: im-gateway
    restart: always
    ports:
      - "8081:8081"
    networks:
      - default_network
    volumes:
      - "/tmp/data/logs:/logs"
    depends_on:
      - nacos
      - zookeeper
      - redis
      - rmq_broker
      - rmq_namesrv
  im-auth:
    build:
      context: ./im-auth
      dockerfile: Dockerfile
    image: im-auth:latest

    hostname: im-auth
    container_name: im-auth
    restart: always
    ports:
      - "8082:8082"
    networks:
      - default_network
    volumes:
      - "/tmp/data/logs:/logs"
    depends_on:
      - nacos
      - zookeeper
      - redis
      - rmq_broker
      - rmq_namesrv
  im-business:
    # 可以根据Dockerfile构建镜像（但是，Docker Compose 会在检测到上下文变化时重新构建镜像。也就是说如果你不修改Dockerfile docker-compose应该不是每次都构建镜像 实测确实如此）
    build:
      context: ./im-business # 指定Dockerfile文件位置
      dockerfile: Dockerfile # 指定名称
    image: im-business:latest # 指定生成镜像的 名称

    # 也可以直接指定镜像名 但是要确保镜像存在 （如果在docker仓库, 则不需要再本地存在镜像 会自动pull）
    # image: im-business:0.0.2

    # 设置容器的主机名 即修改 ： /etc/hosts 中的内容
    hostname: im-business
    # 容器名称
    container_name: im-business
    # 重启策略， always 表示无论哪种状态退出，都会重启容器
    restart: always
    ports:
      # 设置主机与容器的端口映射
      - "8083:8083"
    networks:
      # 使用默认网络即：docker0 桥接
      - default_network
    volumes:
      # 将主机的 /tmp/data/logs 目录挂载到容器的 /logs 目录。这样可以实现数据的持久化，当容器重启时，数据不会丢失，注意 挂载文件需要给宿主机文件 添加最权限，chmod -R 777 目标文件夹
      - "/tmp/data/logs:/logs"
    depends_on:
      - nacos
      - zookeeper
      - redis
      - rmq_broker
      - rmq_namesrv


  # 使用springBoot支持的 jmx采集指标， 也不可行 还是报错，错误信息与下边的javaagent一样：ERROR [prometheus-http-1-1][JmxCollector.java:collect:552] [] - JMX scrape failed: java.io.IOException: Failed to retrieve RMIServer stub: javax.naming.CommunicationException [Root exception is java.rmi.ConnectIOException: error during JRMP connection establishment; nested exception is:	java.net.SocketTimeoutException: Read timed out]
#  im-connect:
#    build:
#      context: ./im-connect
#      dockerfile: Dockerfile
#    image: im-connect:latest
#    hostname: im-connect
#    container_name: im-connect
#    restart: always
#    ports:
#      - "10001:10001"
#      - "9999:9999"   # JMX Exporter 端口
#    networks:
#      - default_network
#    volumes:
#      - "/tmp/data/logs:/logs"
#      - "/usr/local/soft_hzz/docker/jmx/jmx_exporter.yaml:/config/jmx_exporter.yaml"
#      - "/usr/local/soft_hzz/docker/jmx:/usr/local/soft_hzz/docker/jmx"  # 映射整个目录 防止找不到  jmx_prometheus_javaagent-0.16.1.jar 文件
#    environment:
#      - JAVA_TOOL_OPTIONS=-javaagent:/usr/local/soft_hzz/docker/jmx/jmx_prometheus_javaagent-0.16.1.jar=9999:/config/jmx_exporter.yaml
#      - JAVA_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.rmi.port=9999 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=im-connect
#    depends_on:
#      - nacos
#      - zookeeper
#      - redis
#      - rmq_broker
#      - rmq_namesrv

   # 使用javaagent方式采集指标，此方式无需单独进程，目前报错，暂时弃用此方式，错误信息：ERROR [prometheus-http-1-1][JmxCollector.java:collect:552] [] - JMX scrape failed: java.io.IOException: Failed to retrieve RMIServer stub: javax.naming.CommunicationException [Root exception is java.rmi.ConnectIOException: error during JRMP connection establishment; nested exception is:	java.net.SocketTimeoutException: Read timed out]
#  im-connect:
#    build:
#      context: ./im-connect
#      dockerfile: Dockerfile
#    image: im-connect:latest
#    hostname: im-connect
#    container_name: im-connect
#    restart: always
#    ports:
#      - "10001:10001"
#      - "5556:5556"   # JMX Exporter 端口
#      - "5557:5557"   # JMX RMI 端口
#    networks:
#      - default_network
#    volumes:
#      - "/tmp/data/logs:/logs"
#      - "/usr/local/soft_hzz/docker/jmx/jmx_exporter.yaml:/config/jmx_exporter.yaml"
#      - "/usr/local/soft_hzz/docker/jmx:/usr/local/soft_hzz/docker/jmx"  # 映射整个目录 防止找不到  jmx_prometheus_javaagent-0.16.1.jar 文件
#    environment:
#      - JAVA_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=5556 -Dcom.sun.management.jmxremote.rmi.port=5557 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=im-connect
#      - JAVA_TOOL_OPTIONS=-javaagent:/usr/local/soft_hzz/docker/jmx/jmx_prometheus_javaagent-0.16.1.jar=5556:/config/jmx_exporter.yaml
#    depends_on:
#      - nacos
#      - zookeeper
#      - redis
#      - rmq_broker
#      - rmq_namesrv

   # 使用单独的jmx进程进行指标采集，需要起一个容器即下边的：jmx-exporter，有jmx-exporter 采集im-connect 再由 jmx-exporter上报给 prometheus 。
  im-connect:
    build:
      context: ./im-connect
      dockerfile: Dockerfile
    image: im-connect:latest
    hostname: im-connect
    container_name: im-connect
    restart: always
    ports:
      - "10001:10001"
    networks:
      - default_network
    volumes:
      - "/tmp/data/logs:/logs"
    environment:
      - JAVA_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=5556 -Dcom.sun.management.jmxremote.rmi.port=5557 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=im-connect
    depends_on:
      - nacos
      - zookeeper
      - redis
      - rmq_broker
      - rmq_namesrv

   # 使用jmx-exporter进程， 采集 im-connect 的指标
  jmx-exporter:
    image: sscaling/jmx-prometheus-exporter
    container_name: jmx-exporter
    hostname: jmx-exporter
    ports:
      - "5556:5556"
    networks:
      - default_network
    environment:
      - JMX_URL=service:jmx:rmi:///jndi/rmi://im-connect:5556/jmxrmi
    volumes:
      - "/usr/local/soft_hzz/docker/jmx/jmx_exporter.yaml:/config/jmx_exporter.yaml"
      - "/usr/local/soft_hzz/docker/jmx:/usr/local/soft_hzz/docker/jmx"  # 映射整个目录 防止找不到  jmx_prometheus_javaagent-0.16.1.jar 文件

  im-console:
    build:
      context: ./im-console
      dockerfile: Dockerfile
    image: im-console:latest
    hostname: im-console
    container_name: im-console
    restart: always
    ports:
      - "8084:8084"
    networks:
      - default_network
    volumes:
      - "/tmp/data/logs:/logs"
    depends_on:
      - nacos
      - zookeeper
      - redis
      - rmq_broker
      - rmq_namesrv

  # ######################################### 以下是此im项目 依赖的中间件 #########################################

  # rocketMq nameServer
  rmq_namesrv:
    image: apache/rocketmq:4.8.0
    container_name: rmq_namesrv
    restart: always
    ports:
      - "9876:9876"
    volumes:
      - /usr/local/soft_hzz/docker/rocketmq_namesrv/store:/root/store
      - /usr/local/soft_hzz/docker/rocketmq_namesrv/logs:/root/logs
    command: sh mqnamesrv
  # rocketMq broker
  rmq_broker:
    image: apache/rocketmq:4.8.0
    container_name: rmq_broker
    restart: always
    ports:
      - "10911:10911"
      - "10909:10909"
    volumes:
      - /usr/local/soft_hzz/docker/rocketmq_broker/store:/root/store
      - /usr/local/soft_hzz/docker/rocketmq_broker/logs:/root/logs
      - /usr/local/soft_hzz/docker/rocketmq_broker/conf/broker.conf:/opt/rocketmq-4.8.0/conf/broker.conf
    environment:
      - JAVA_OPT_EXT=-server -Xms512m -Xmx1g -Xmn256m # 降低内存大小 防止启动失败
#      - LOCAL_IP=${LOCAL_IP}
    command: sh mqbroker -c /opt/rocketmq-4.8.0/conf/broker.conf

  rocketmq-console:
    image: styletang/rocketmq-console-ng
    container_name: rocketmq-console
    restart: always
    ports:
      - "8080:8080"
    environment:
      JAVA_OPTS: "-Drocketmq.namesrv.addr=172.30.128.65:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false"
    depends_on:
      - rmq_namesrv
      - rmq_broker
  # nacos
  nacos:
    image: nacos/nacos-server:2.0.3
    container_name: nacos
    restart: always
    ports:
      - "8848:8848"
    volumes:
      - /usr/local/soft_hzz/docker/nacos/data:/home/nacos/data
      - /usr/local/soft_hzz/docker/nacos/logs:/home/nacos/logs
    environment:
      MODE: standalone
  #redis
  redis:
    image: redis
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - /usr/local/soft_hzz/docker/redis/data:/data
      - /usr/local/soft_hzz/docker/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
  # zk
  zookeeper:
    image: zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - /usr/local/soft_hzz/docker/zk/data:/data
      - /usr/local/soft_hzz/docker/zk/datalog:/datalog
      - /usr/local/soft_hzz/docker/zk/conf/zoo.cfg:/conf/zoo.cfg

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      # 数据挂载 防止容器重启/停止后  数据消失
      - /usr/local/soft_hzz/docker/prometheus/conf/prometheus.yml:/etc/prometheus/prometheus.yml
      - /usr/local/soft_hzz/docker/prometheus/data/prometheus_data:/prometheus  # 挂载数据到宿主机目录

    ports:
      - "9090:9090"
    networks:
      - default_network
    depends_on:
      - im-connect
      - im-console
      - im-business
      - im-gateway
      - im-auth
      - node_exporter
      - cadvisor
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafana123 # grafana 密码
    # 挂载数据到宿主机目录
    volumes:
    - /usr/local/soft_hzz/docker/grafana/grafana_data:/var/lib/grafana

    # 必须指定 网络，否则无法通过服务名 如：im-business 找到对应的ip
    networks:
      - default_network
    depends_on:
      - im-connect
      - im-console
      - im-business
      - im-gateway
      - im-auth
      - prometheus

  # 用于监控linux系统的信息
  node_exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - default_network
  # 用于监控docker容器的信息
  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    ports:
      - "9101:8080" # 8080已经被rocketMQ控制台占用 所以这里选择映射到主机的 9101端口
    privileged: true
#    volumes:
      #- /usr/local/soft_hzz/docker/cadvisor/run/docker.sock:/var/run/docker.sock
      #- /usr/local/soft_hzz/docker/cadvisor/sys:/sys
      # - /usr/local/soft_hzz/docker/cadvisor/lib/docker/:/var/lib/docker/
    networks:
      - default_network

networks:
  default_network:
    # 桥接
    driver: bridge