<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>xzll-im-parent</artifactId>
        <groupId>com.xzll</groupId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../../pom.xml</relativePath> <!-- 确保路径正确 -->    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>im-business-service</artifactId>



    <dependencies>

        <dependency>
            <groupId>com.xzll</groupId>
            <artifactId>im-common</artifactId>
        </dependency>

        <dependency>
            <groupId>com.xzll</groupId>
            <artifactId>im-connect-api</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-spring-boot-starter</artifactId>
        </dependency>
        <!--ZooKeeper客户端-->
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-framework</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-recipes</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-x-discovery</artifactId>
        </dependency>

        <dependency>
            <groupId>com.xzll</groupId>
            <artifactId>im-business-api</artifactId>
        </dependency>

        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
        </dependency>

        <!--nacos配置中心-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>

        <!--需要此jar包 如果不配这个 bootstarp.yml文件将不会被识别为spring配置文件,也就是bootstrap.yml文件将不会有小绿树叶标识-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>

        <!-- 集成 Elasticsearch 内部已经包含 elasticsearch-rest-high-level-client-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-elasticsearch</artifactId>
        </dependency>

        <!-- Elasticsearch Java 客户端 比较新 保守期间还是用更稳定的  elasticsearch-rest-high-level-client 吧  -->
<!--        <dependency>-->
<!--            <groupId>co.elastic.clients</groupId>-->
<!--            <artifactId>elasticsearch-java</artifactId>-->
<!--        </dependency>-->

        <!--稳定的es客户端 这里无需手动集成 因为 spring-boot-starter-data-elasticsearch 中已经集成了 -->
<!--        <dependency>-->
<!--            <groupId>org.elasticsearch.client</groupId>-->
<!--            <artifactId>elasticsearch-rest-high-level-client</artifactId>-->
<!--        </dependency>-->


    </dependencies>

    <build>
<!--        <plugins>-->
<!--            <plugin>-->
<!--                <artifactId>maven-resources-plugin</artifactId>-->
<!--                <configuration>-->
<!--                    <encoding>utf-8</encoding>-->
<!--                    &lt;!&ndash; 需要指定这玩意 否则springboot将使用 @占位符  &ndash;&gt;-->
<!--                    <useDefaultDelimiters>true</useDefaultDelimiters>-->
<!--                    &lt;!&ndash;用于打胖jar 即直接可以执行的jar包 一般会比较大，如果只想打瘦包只包含class文件的话 则指定为false(该应用场景一般是非springboot项目)&ndash;&gt;-->
<!--                    <skip>false</skip>-->
<!--                </configuration>-->
<!--            </plugin>-->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-compiler-plugin</artifactId>-->
<!--                <version>3.8.1</version>-->
<!--                <inherited>true</inherited>-->
<!--                <configuration>-->
<!--                    <source>1.8</source>-->
<!--                    <target>1.8</target>-->
<!--                </configuration>-->
<!--            </plugin>-->
<!--        </plugins>-->

        <resources>
            <resource>
                <directory>src/main/resources/</directory>
                <!--会使用profiles中的properties 来替换 includes为true文件的变量占位符 -->
                <filtering>true</filtering>
                <includes>
                    <include>**/*.yml</include>
                    <include>**/*.yaml</include>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                    <include>**/*.json</include>
                    <include>**/*.pem</include>
                    <include>**/*.jks</include>

                </includes>
                <excludes>
                    <exclude>*.jks</exclude>
                </excludes>
            </resource>
        </resources>

    </build>

</project>